@page "/counter"
@using Eloe.InterfaceSerializer;
@using System.Net.WebSockets;
@using System.Text;
@using Eloe.ClientServerComDef;

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>
<p>Returned counter: @returnedCounter</p>
<p>Exception: @exception</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
<button class="btn btn-primary" @onclick="ConnectToServer">Connect to server</button>

@code {
    private int currentCount = 0;
    private int returnedCounter = 0;
    private string exception = "";

    private SimpleConsoleLogger _logger = new SimpleConsoleLogger();
    private WsClient? _client;
    private IServerFunctions? _serverFunctions;
    private void IncrementCount()
    {
        currentCount++;
    }

    private async void ConnectToServer()
    {
        try
        {
            if (_client == null)
            {
                _client = new WsClient(_logger);
                await _client.Connect("localhost", 9000);
                _serverFunctions = _client.AddServerInterface<IServerFunctions>();
                _client.ImplementInterface<IClientCallbackFunctions>(new ClientCallbackFunctions());
            }

            //_serverFunctions.WriteMessage($"Hello from wasm: {currentCount}");
            Console.WriteLine("Calling Process");
            var pres = await _serverFunctions.Process(currentCount);
            Console.WriteLine($"Process returned: {pres.ProcessingTimeInMs}");
            returnedCounter = (int)pres.ProcessingTimeInMs;

            StateHasChanged();
        }
        catch (Exception ex)
        {
            exception = ex.ToString();
        }
    }

    private class ClientCallbackFunctions : IClientCallbackFunctions
    {
        public ClientCallbackFunctions()
        {
        }

        public bool DispalayMessage(MessageInfo mi)
        {
            return true;
        }
    }
}
